#include <iostream>
#include <vector>
#include <algorithm>
#include <queue>
#include <climits> 
using namespace std;

struct Edge {
    int u, v, weight;
};

class DisjointSet {
public:
    vector<int> parent;
    DisjointSet(int n) {
        parent.resize(n);
        for (int i = 0; i < n; ++i) parent[i] = i;
    }
    int find(int i) {
        if (parent[i] != i)
            parent[i] = find(parent[i]);
        return parent[i];
    }
    void unionSet(int x, int y) {
        int rootX = find(x);
        int rootY = find(y);
        if (rootX != rootY) parent[rootX] = rootY;
    }
};

class Graph {
public:
    int V;
    vector<vector<pair<int, int>>> adjList;
    Graph(int v) : V(v) {
        adjList.resize(V);
    }
    void addEdge(int u, int v, int w) {
        adjList[u].push_back({v, w});
        adjList[v].push_back({u, w});
    }

    // Kruskal's Algorithm
    void kruskalMST() {
        vector<Edge> edges;
        for (int u = 0; u < V; ++u) {
            for (int j = 0; j < adjList[u].size(); ++j) { 
                int v = adjList[u][j].first;
                int w = adjList[u][j].second;
                if (u < v) edges.push_back({u, v, w});
            }
        }
        sort(edges.begin(), edges.end(), [](Edge a, Edge b) { return a.weight < b.weight; });

        DisjointSet ds(V);
        cout << "Kruskal's MST:\n";
        for (int i = 0; i < edges.size(); ++i) {  
            int u = edges[i].u;
            int v = edges[i].v;
            int w = edges[i].weight;
            if (ds.find(u) != ds.find(v)) {
                ds.unionSet(u, v);
                cout << u << " -- " << v << " == " << w << endl;
            }
        }
    }

    // Prim's Algorithm
    void primMST() {
        vector<int> key(V, INT_MAX), parent(V, -1);
        vector<bool> inMST(V, false);
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> minHeap;

        key[0] = 0;
        minHeap.push({0, 0});

        cout << "Prim's MST:\n";
        while (!minHeap.empty()) {
            int u = minHeap.top().second;
            minHeap.pop();

            if (inMST[u]) continue;
            inMST[u] = true;

            for (int j = 0; j < adjList[u].size(); ++j) { 
                int v = adjList[u][j].first;
                int w = adjList[u][j].second;
                if (!inMST[v] && w < key[v]) {
                    key[v] = w;
                    parent[v] = u;
                    minHeap.push({w, v});
                }
            }
        }

        for (int i = 1; i < V; ++i)
            if (parent[i] != -1)
                cout << parent[i] << " -- " << i << " == " << key[i] << endl;
    }
};

int main() {
    int choice, V, E;
    cout<<"Choose from below options"<<endl;
    cout << "1. Kruskal's Algorithm\n2. Prim's Algorithm\nChoose: ";
    cin >> choice;

    cout << "Enter number of vertices: ";
    cin >> V;
    Graph g(V);

    cout << "Enter number of edges: ";
    cin >> E;

    for (int i = 0; i < E; ++i) {
        int u, v, w;
        cout << "Enter edge (u v w): ";
        cin >> u >> v >> w;
        g.addEdge(u, v, w);
    }

    if (choice == 1)
        g.kruskalMST();
    else if (choice == 2)
        g.primMST();
    else
        cout << "Invalid choice!" << endl;

    return 0;
}
